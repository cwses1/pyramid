SYSTEM STATE VS. FILE STATE
	* Updating a file will generate several builds, how to throttle this and check for stability?
	* A repo update will not generate several builds.
	* Timer?
	* Notifications from GitHub -> Flask server?
	* Visualization?  React Flow? Elm?  Dart?  Highlighting what's happening?
	* How to take into account environments, solutions, etc?  Do we even need to do this?
	* How to process differently based on environment?  Linting for dev, minify for prod, etc.
	* How to do approvals for deployment?
	* How to specify concurrency, order of building?
	* How to force a build manually?
	* What if the same asset is deployed to a different service in different environments?  DEV - IIS, PROD - CloudFront?
	* How to push artifacts that are already built and are ready to move to the next environment?  We should not build stuff from scratch each time from source.

webapp solution
{
}

default solution
{
}

default environment
{
	solution: default;
	webAppBucketUrl: 's3://webapp-bucket-preprod.s3.amazonaws.com';
	webAppDir: '/';
}

dev environment
{
	solution: webapp;
}

qa environment
{
	solution: webapp;
}

prod environment
{
	solution: webapp;
	webAppBucketUrl: 's3://webapp-bucket-prod.s3.amazonaws.com';
	webAppDir: '/path/to/app';
}

//
// A module is a concept or a set of components.
//
webApp module
{
	//
	// CHILD DEPENDENCIES.  IF ANY OF THESE ARE UPDATED, THEN THE PARENT IS REBUILT.
	//
	build: async;
	child: webapp_html;
	child: webapp_css;
	child: webapp_js;
	child: webapp_config;
	child: webapp_images;

	//
	// SOME TARGETS MUST BE TRIGGERED ON A SCHEDULE BECAUSE IT DOESN'T NOTIFY.
	//
	//triggerSchedule: webappTriggerSchedule;
	//
	// USE MORE COMMAS FOR TERSITY WHEN DEFINING THE TOPOLOGY.
	//
	//environment: dev, qa;
}

webapp_html object
{
	type: file;
	path: '{{webAppBucketUrl}}{{webAppDir}}webapp.html' (default);

	type: s3 object (prod)
	path: '{{webAppBucketUrl}}{{webAppDir}}webapp.html' (prod); // environment hint	or override
}

webapp_html build command
{
	agent: 'dotnet_framework'; // Any agent that has dotnet_framework capabilities can run this command.
	path: 'csc';
	arg: '*.cs';
	arg: '/subdir/*.csc';
	arg: '-debug' (environment: not prod);
}

component webapp_css
{
	type: s3 object;
	path: '{{webappBucketUrl}}/webapp.css';
	path: '{{webappBucketUrl}}/some/prod/url/webapp.css' (prod);
}

webappTriggerSchedule
{
	//
	// JUST USE THIS SCHEDULE.
	//
	include: everyDayAtMidnightSchedule;
	include: everyDayAtNoonSchedule;
	exclude: holidaySchedule;
	
	//
	// YOU CAN ALSO ADD TO THIS SCHEDULE AND THIS WILL FIRE IN ADDITION TO EVERY DAY AT MIDNIGHT.
	//
	timeZone: EST;
	startDateTime: 2025-06-27;
	endDateTime: 2025-06-27;
	include: 2025-06-28 12:00:00 PM EST;
	exclude: 2025-06-30 12:00:00 AM EST'
	year: 2025;
	yearMod: 2;
	month: 5;
	monthMod: 5;
	day: lastDayOfMonth;
	dayMod: 15
	dayOfYear: 10;
	hour: 0, 12 AM, 13;
	hourMod: 12;
	hour: 12;
	minute: 0, 30;
	minuteMod: 30;
	second: 0, 10, 20, 30, 40, 50
	secondMod: 10;
}


holidaySchedule
{
	include: holiday2025Schedule;
	include: holiday2026Schedule;
	include: holiday2027Schedule;
}


holiday2025Schedule
{
}


everyDayAtMidnightSchedule
{
}


app_exe
{
	type: file;
	path: '/my/app.exe';
	child: app_dll (FAST_BUILD_HINT); // Fast build hints may not require a full build, such as installing an new DLL.
	child: app_source_code_set;
	child: app_package_set;
	
	//
	// DEFAULT BUILD IF ANY CHILD CHANGES AND NO BUILD HINT IS PROVIDED.
	//
	build: app_exe_build;
	test: app_exe_test;
}

app_exe_build
{
	type: command;
	path: 'csc';
	arg: '*.cs';
	arg: '/sub/*.csc';
}

app_exe_test
{
	type: command;
	path: 'csc';
	arg: '*.cs';
	arg: '/sub/*.csc';
}

app_dll
{
	type: file;
	path: '/my/app.dll';
}

app_source_code_set
{
	type: glob;
	include: '/my/source/app/**/*.cs';
	exclude: '/my/source/app/*.csproj';
	exclude: '/my/source/app/*.sln';
	trigger: md5;
	trigger: sha1;
	trigger: last_updated_timestamp;
}

app_package_set
{
	type: file;
	path: '/my/app.dll';
	child: app_exe;
}

repo
{
	type: git;
	path: 'http://www.github.com/cwses1/buildwave';
	trigger: manual;
	trigger-frequency: 1m;
}

package
{
	type: nuget;
	path: 'http://www.github.com/cwses1/buildwave';
}

messageModelsLib
{
	type: artifactory;
	path: 'https://'
	trigger: md5;
	trigger: sha1;
	trigger: last_updated_timestamp;
}

